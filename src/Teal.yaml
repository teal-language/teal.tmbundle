fileTypes:
- tl
firstLineMatch: \A#!.*?\btl(\d+(\.\d+)?)?\b|\A--\s+-\*-\s*tl\s*-\*-
name: Teal
scopeName: source.teal
patterns:
-   include: '#expression'
-   include: '#statement'
repository:
    base:
        patterns:
        -   include: '#comment'
        -   include: '#variable-annotation'
        -   include: '#constant'
        -   include: '#number'
        -   include: '#string'
        -   include: '#long-string'
    comment:
        patterns:
        -   include: '#long-comment'
        -   include: '#short-comment'
    long-comment:
        patterns:
        -   begin: --\[(=*)\[
            beginCaptures:
                '0':
                    name: punctuation.definition.comment.begin.teal
            end: \]\1\]
            endCaptures:
                '0':
                    name: punctuation.definition.comment.end.teal
            name: comment.block.teal
    short-comment:
        patterns:
        -   name: comment.teal
            match: --.*$
    optional:
        patterns:
        -   name: storage.modifier.optional.teal
            match: (\?)
    constant:
        patterns:
        -   match: \b(nil|true|false)\b
            name: constant.language.teal
    number:
        patterns:
        -   match: (?<![\w\d.])0[xX][0-9A-Fa-f]+(?![pPeE.0-9])
            name: constant.numeric.integer.hexadecimal.teal
        -   match: (?<![\w\d.])0[xX][0-9A-Fa-f]+(\.[0-9A-Fa-f]+)?([eE]-?\d*)?([pP][-+]\d+)?
            name: constant.numeric.float.hexadecimal.teal
        -   match: (?<![\w\d.])\d+(?![pPeE.0-9])
            name: constant.numeric.integer.teal
        -   match: (?<![\w\d.])\d+(\.\d+)?([eE]-?\d*)?
            name: constant.numeric.float.teal
    string:
        patterns:
        -   begin: ''''
            beginCaptures:
                '0':
                    name: punctuation.definition.string.begin.teal
            end: ''''
            endCaptures:
                '0':
                    name: punctuation.definition.string.end.teal
            name: string.quoted.single.teal
            patterns:
            -   include: '#escaped-char'
        -   begin: '"'
            beginCaptures:
                '0':
                    name: punctuation.definition.string.begin.teal
            end: '"'
            endCaptures:
                '0':
                    name: punctuation.definition.string.end.teal
            name: string.quoted.double.teal
            patterns:
            -   include: '#escaped-char'
    long-string:
        begin: \[(=*)\[
        beginCaptures:
            '0':
                name: punctuation.definition.string.begin.teal
        end: \]\1\]
        endCaptures:
            '0':
                name: punctuation.definition.string.end.teal
        name: string.multiline.teal
    escaped-char:
        patterns:
        -   match: \\[abfnrtvz\\"'\n]
            name: constant.character.escape.teal
        -   match: \\\d{1,3}
            name: constant.character.escape.byte.teal
        -   match: \\x[0-9A-Fa-f][0-9A-Fa-f]
            name: constant.character.escape.byte.teal
        -   match: \\u\{[0-9A-Fa-f]+\}
            name: constant.character.escape.unicode.teal
        -   match: \\.
            name: invalid.illegal.character.escape.teal
    expression:
        patterns:
        -   include: '#base'
        -   include: '#parentheses'
        -   include: '#brackets'
        -   include: '#operator'
        -   include: '#builtin-function'
        -   include: '#function-block'
        -   include: '#function-call'
        -   include: '#table-constructor'
        -   include: '#record-or-interface-block'
        -   include: '#enum-block'
        -   include: '#self'
        -   include: '#field-access'
    parentheses:
        patterns:
        -   begin: \(
            end: \)
            name: teal.parentheses
            patterns:
            -   include: '#expression'
    brackets:
        patterns:
        -   begin: \[
            end: \]
            name: teal.brackets
            patterns:
            -   include: '#expression'
    operator:
        patterns:
        -   match: \+|-|%|#|\*|\/|\^|==?|~=|<=?|>=?|(?<!\.)\.{2}(?!\.)
            name: keyword.operator.teal
        -   match: \b(and|or|not)\b
            name: keyword.operator.logical.teal
        -   match: \b(as|is|in)\b
            name: keyword.other.teal
    builtin-function:
        patterns:
        -   match: (?<![^.]\.|:)\b(assert|collectgarbage|dofile|error|getfenv|getmetatable|ipairs|loadfile|loadstring|module|next|pairs|pcall|print|rawequal|rawget|rawset|require|select|setfenv|setmetatable|tonumber|tostring|type|unpack|xpcall)\b(?=\s*(?:[({"']|\[\[))
            name: support.function.teal
        -   match: (?<![^.]\.|:)\b(coroutine\.(create|resume|running|status|wrap|yield)|string\.(byte|char|dump|find|format|gmatch|gsub|len|lower|match|rep|reverse|sub|upper)|table\.(concat|insert|maxn|remove|sort)|math\.(abs|acos|asin|atan2?|ceil|cosh?|deg|exp|floor|fmod|frexp|ldexp|log|log10|max|min|modf|pow|rad|random|randomseed|sinh?|sqrt|tanh?)|io\.(close|flush|input|lines|open|output|popen|read|tmpfile|type|write)|os\.(clock|date|difftime|execute|exit|getenv|remove|rename|setlocale|time|tmpname)|package\.(cpath|loaded|loadlib|path|preload|seeall)|debug\.(debug|[gs]etfenv|[gs]ethook|getinfo|[gs]etlocal|[gs]etmetatable|getregistry|[gs]etupvalue|traceback))\b(?=\s*(?:[({"']|\[\[))
            name: support.function.library.teal
    function-block:
        patterns:
        -   begin: (\bfunction\b)
            end: (\bend\b)
            beginCaptures:
                '0':
                    name: keyword.declaration.function.teal
            endCaptures:
                '0':
                    name: keyword.control.teal
            patterns:
            -   include: '#function-signature'
            -   include: '#function-body'
    function-signature:
        patterns:
        -   begin: (?<=\bfunction\b)
            end: \)
            name: function.signature.teal
            patterns:
            -   include: '#comment'
            -   include: '#function-name'
            -   include: '#generics'
            -   include: '#function-args'
    function-body:
        begin: (?<=\))
        end: (?=\bend\b)
        name: teal.function.body
        patterns:
        -   include: '#statement'
    function-name:
        patterns:
        -   match: ([a-zA-Z_][a-zA-Z0-9_]*)
            name: support.function.name.teal
    generics:
        patterns:
        -   begin: <
            end: '>'
            name: type.arguments.teal
            patterns:
            -   include: '#comment'
            -   include: '#type-arg'
    type-arg:
        patterns:
        -   match: '[a-zA-Z_][a-zA-Z0-9_]*'
            name: support.type.teal
    function-args:
        patterns:
        -   begin: \(
            end: (?=\))
            name: function.arguments.teal
            patterns:
            -   include: '#comment'
            -   include: '#function-arg-name'
            -   include: '#function-arg-type'
    function-arg-name:
        patterns:
        -   comment: First argument
            begin: (?<=\()
            end: (?=:|\))
            name: function.argument.teal
            patterns:
            -   include: '#comment'
            -   include: '#optional'
        -   comment: Nth argument
            begin: ','
            end: (?=:|\))
            name: function.argument.teal
            patterns:
            -   include: '#comment'
            -   include: '#optional'
    function-arg-type:
        patterns:
        -   begin: ':'
            end: (?=,|\))
            patterns:
            -   include: '#comment'
            -   include: '#type'
    type:
        patterns:
        -   include: '#function-type'
        -   include: '#table-type'
        -   include: '#type-name'
        -   include: '#generics'
    extendable-type:
        patterns:
        -   begin: (\bis\b)
            end: (\bwhere\b|[\r\n]+)
            name: entity.other.inherited-class.teal
            beginCaptures:
                '1':
                    name: keyword.control.is.teal
            endCaptures:
                '1':
                    name: keyword.control.where.teal
        -   include: '#type'
    function-type:
        patterns:
        -   begin: (\bfunction\b)\s*(<\s*)?([a-zA-Z_][a-zA-Z0-9_, ]*\s*)?(>\s*)?\(
            end: \)
            beginCaptures:
                '1':
                    name: keyword.declaration.function.teal
                '3':
                    name: support.type.teal
            patterns:
            -   include: '#comment'
            -   include: '#function-arg-name'
            -   include: '#function-arg-type'
            -   include: '#type'
        -   match: (\bfunction\b)\s*(<\s*)?([a-zA-Z_][a-zA-Z0-9_, ]*\s*)?(>\s*)?
            captures:
                '1':
                    name: keyword.declaration.function.teal
                '3':
                    name: support.type.teal
    table-type:
        patterns:
        -   name: support.tabletype.teal
            begin: '{'
            end: '}'
            patterns:
            -   include: '#comment'
            -   include: '#type'
    type-name:
        patterns:
        -   match: '[a-zA-Z_][a-zA-Z0-9_]*'
            name: support.type.teal
        -   match: \.
            name: punctuation.accessor.teal
    function-call:
        patterns:
        -   begin: \b((?!\bfunction\b|\breturn\b|\bif\b|\belseif\b|\bwhile\b|\buntil\b|\bin\b)[a-zA-Z_][a-zA-Z0-9_]*)\b(?=\s*(?:\())
            end: (?<=\))
            name: function-call
            beginCaptures:
                '1':
                    name: support.function.any-method.teal
            patterns:
            -   include: '#parentheses'
        -   begin: \b((?!\bfunction\b|\breturn\b|\bif\b|\belseif\b|\bwhile\b|\buntil\b|\bin\b)[a-zA-Z_][a-zA-Z0-9_]*)\b(?=\s*(?:\{))
            end: (?<=})
            name: function-call
            beginCaptures:
                '1':
                    name: support.function.any-method.teal
            patterns:
            -   include: '#table-constructor'
        -   begin: \b((?!\bfunction\b|\breturn\b|\bif\b|\belseif\b|\bwhile\b|\buntil\b|\bin\b)[a-zA-Z_][a-zA-Z0-9_]*)\b(?=\s*("|'))
            end: (?<=\2)
            name: function-call
            beginCaptures:
                '1':
                    name: support.function.any-method.teal
            patterns:
            -   include: '#string'
        -   begin: \b((?!\bfunction\b|\breturn\b|\bif\b|\belseif\b|\bwhile\b|\buntil\b|\bin\b)[a-zA-Z_][a-zA-Z0-9_]*)\b(?=\s*(\[(=*)\[))
            end: (?<=\]\3\])
            name: function-call
            beginCaptures:
                '1':
                    name: support.function.any-method.teal
            patterns:
            -   include: '#long-string'
    table-constructor:
        begin: '{'
        end: '}'
        name: teal.table-constructor
        patterns:
        -   include: '#comment'
        -   begin: '='
            end: ;|,|(?=})
            patterns:
            -   include: '#expression'
        -   begin: \[
            end: \]
            name: teal.brackets
            patterns:
            -   include: '#expression'
        -   begin: ':'
            end: (?<=\))|(?=[=,};])
            patterns:
            -   include: '#comment'
            -   include: '#function-call'
            -   include: '#type'
        -   match: '[a-zA-Z_][a-zA-Z0-9_]*\s*(?=.+=)'
            name: variable.other.teal
        -   include: '#expression'
    record-or-interface-block:
        begin: (\b(record|interface)\b)
        end: (\bend\b)
        beginCaptures:
            '0':
                name: storage.type.record.teal
        endCaptures:
            '0':
                name: keyword.control.teal
        name: statement.record-or-interface-block.teal
        patterns:
        -   include: '#extendable-type'
        -   include: '#comment'
        -   include: '#enum-block'
        -   include: '#record-or-interface-block'
        -   include: '#new-type-declaration'
        -   match: ^\s*\buserdata\b
            name: storage.type.userdata.teal
        -   begin: ^\s*\bmetamethod\b
            end: ':'
            beginCaptures:
                '0':
                    name: storage.type.metamethod.teal
            patterns:
            -   include: '#function-name'
        -   match: '^\s*([a-zA-Z_][a-zA-Z0-9_]*)\s*:'
            captures:
                '1':
                    name: variable.other.teal
        -   include: '#type'
    new-type-declaration:
        begin: \b(type)\b
        end: $
        beginCaptures:
            '1':
                name: keyword.declaration.type.teal
        patterns:
        -   begin: '[a-zA-Z_][a-zA-Z0-9_]*'
            end: =|$
            beginCaptures:
                '0':
                    name: support.type.teal
            patterns:
            -   include: '#comment'
        -   begin: (?<==)
            end: $
            patterns:
            -   include: '#comment'
            -   include: '#record-or-interface-block'
            -   include: '#enum-block'
            -   include: '#type'
    enum-block:
        begin: (\benum\b)
        end: (\bend\b)
        beginCaptures:
            '0':
                name: storage.type.enum.teal
        endCaptures:
            '0':
                name: keyword.control.teal
        patterns:
        -   include: '#comment'
        -   include: '#string'
        -   match: '[a-zA-Z_][a-zA-Z0-9_]*'
            name: support.type.teal
    self:
        match: (?<![^.]\.|:)\b(self)\b
        name: variable.language.self.teal
    field-access:
        match: (?<=[^.]\.|:)\b([a-zA-Z_][a-zA-Z0-9_]*)
        name: variable.other.teal
    statement:
        patterns:
        -   include: '#expression'
        -   include: '#if-block'
        -   include: '#do-block'
        -   include: '#repeat-block'
        -   include: '#while-block'
        -   include: '#for-block'
        -   include: '#goto'
        -   include: '#label'
        -   include: '#break'
        -   include: '#return'
        -   include: '#scope-modifier'
        -   include: '#type-annotation'
        -   include: '#new-type-declaration'
    if-block:
        begin: (\bif\b)
        end: (\bend\b)
        beginCaptures:
            '0':
                name: keyword.control.if.teal
        endCaptures:
            '0':
                name: keyword.control.teal
        name: statement.if-block.teal
        patterns:
        -   include: '#expression'
        -   match: \bthen\b
            name: keyword.control.if-then.teal
        -   begin: (\belseif\b)
            end: (\bthen\b)
            beginCaptures:
                '0':
                    name: keyword.control.elseif.teal
            endCaptures:
                '0':
                    name: keyword.control.then.teal
            name: statement.elseif.teal
            patterns:
            -   include: '#expression'
        -   match: \belse\b
            name: keyword.control.else.teal
        -   include: '#statement'
    do-block:
        begin: (\bdo\b)
        end: (\bend\b)
        beginCaptures:
            '0':
                name: keyword.control.teal
        endCaptures:
            '0':
                name: keyword.control.teal
        name: statement.do-block.teal
        patterns:
        -   include: '#statement'
    repeat-block:
        begin: (\brepeat\b)
        end: (\buntil\b)
        beginCaptures:
            '0':
                name: keyword.control.teal
        endCaptures:
            '0':
                name: keyword.control.teal
        name: statement.repeat-block.teal
        patterns:
        -   include: '#statement'
    while-block:
        begin: (\bwhile\b)
        end: (\bend\b)
        beginCaptures:
            '0':
                name: keyword.control.teal
        endCaptures:
            '0':
                name: keyword.control.teal
        name: statement.while-block.teal
        patterns:
        -   begin: (?<=\bwhile\b)
            end: \bdo\b
            name: teal.while.expression
            endCaptures:
                '0':
                    name: keyword.control.do.teal
            patterns:
            -   include: '#expression'
        -   begin: (?<=\bdo\b)
            end: (?=\bend\b)
            name: teal.while.body
            patterns:
            -   include: '#statement'
    for-block:
        begin: (\bfor\b)
        end: (\bend\b)
        beginCaptures:
            '0':
                name: keyword.control.teal
        endCaptures:
            '0':
                name: keyword.control.teal
        name: statement.for.teal
        patterns:
        -   begin: (?<=\bfor\b)
            end: \bdo\b
            name: teal.for.expression
            endCaptures:
                '0':
                    name: keyword.control.do.teal
            patterns:
            -   include: '#expression'
        -   begin: (?<=\bdo\b)
            end: (?=\bend\b)
            name: teal.for.body
            patterns:
            -   include: '#statement'
    goto:
        match: \b(goto)\b
        name: keyword.control.teal
    label:
        match: '::([a-zA-Z_][a-zA-Z0-9_]*)::'
        name: entity.name.label.teal
    break:
        match: \b(break)\b
        name: keyword.control.teal
    return:
        match: \b(return)\b
        name: keyword.control.teal
    scope-modifier:
        match: \b(local|global)\b
        name: storage.modifier.teal
    variable-annotation:
        match: \<\b(const|close|total)\b\>
        name: storage.modifier.annotation.teal
    type-annotation:
        patterns:
        -   comment: Matches the type annotations that have not yet been matched by other rules. Matches method calls as well. Assumes that one line functions with a return type contain
                only a 'return' statement...
            begin: ':'
            end: (?<=\))|=|;|$|(?=\breturn\b)
            patterns:
            -   include: '#comment'
            -   include: '#function-call'
            -   include: '#type'
